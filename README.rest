######################################################################
django-wepay
######################################################################

**Django SDK for WePay http://www.wepay.com**

Status
------

Currently SDK is functional, but still in a development mode. Fairly soon it will be used in production. Documentation is also on the way.

About
-----

If you start using WePay API you realize that there is a bunch of staff needs to be stored locally, so that was an actual motivation for creation of this app. There is functionality for storing information for all objects in the database locally. For each object you can choose to store only minimal fields, all fields and/or add custom fields required for your app. It also handles `IPN (instant payment notifications) <https://www.wepay.com/developer/tutorial/ipn>`_ for all supported objects. Currently all but ``/app`` and ``/credit_card`` API calls are fully supported.

Requirements
------------

* `Python WePay SDK <https://github.com/wepay/Python-SDK>`_
* `Django >= 1.4 <https://www.djangoproject.com/>`_

Features
--------

* Supported all WePay API calls for objects:
    * `OAuth2 <https://www.wepay.com/developer/reference/oauth2>`_
    * `/user <https://www.wepay.com/developer/reference/user>`_
    * `/account <https://www.wepay.com/developer/reference/account>`_
    * `/checkout <https://www.wepay.com/developer/reference/checkout>`_
    * `/preapproval <https://www.wepay.com/developer/reference/preapproval>`_
    * `/withdrawal <https://www.wepay.com/developer/reference/withdrawal>`_
* IPN calls for supported objects, with simple throttling protection. 
* Signals upon state change an supported objects as well as for an IPN call.
* Setting of default details for all supported objects with ability to change per call.
* Ability of choosing to store all information locally per object.
* Ability to specify additional fields per object without extending a model.
* Ability to retain record in case of user revoking access or deleting an account.
* Automatic revival of all records associated with user upon supplying new access_token for a user that had records marked as deleted.

Settings
--------

**Required:**

* ``WEPAY_CLIENT_ID`` - WePay Application Client ID
* ``WEPAY_CLIENT_SECRET`` - WePay Application Client Secret
* ``WEPAY_ACCOUNT_ID`` - WePay Application Account ID
* ``WEPAY_ACCESS_TOKEN`` - WePay Application Access Token

**Optional:**

* ``WEPAY_PRODUCTION`` - Chooses url to use for API calls (https://www.wepay.com if ``True`` and https://stage.wepay.com if ``False``, which is decided by Python WePay SDK). Default is ``False``. Set it to ``True`` if using in production enviroment.
* ``SITE_FULL_URL`` - Full url of the site with protocol ex. https://www.example.com If it is not set make sure you have ``django.contrib.sites`` in it to ``INSTALED_APPS`` since it will be used to decide on the url.
* ``FORCE_SCRIPT_NAME`` - `Django setting <https://docs.djangoproject.com/en/1.4/ref/settings/#force-script-name>`_ in case your app is not at root of the domain. ex: If address for your site: https://www.example.com/myapp/ set ``FORCE_SCRIPT_NAME = 'myapp/'``
* ``WEPAY_DEFAULT_SCOPE`` - default `permissions <https://www.wepay.com/developer/reference/permissions>`_ for your WePay application. Default is full access, which is ``"manage_accounts,collect_payments,view_balance,view_user,refund_payments,preapprove_payments,send_money"``
* ``WEPAY_RETAIN_RECORDS`` - default is ``True``. Whenever account is deleted or user revokes the access and setting is set to ``True``, all records associated with user or account respectively will be marked as deleted in the database instead of being permanently removed, which is the case when setting is set to ``False``.
* ``WEPAY_IPN_LIMIT`` - default is ``(20, 10)``. A tuple limiting the number of `IPN <https://www.wepay.com/developer/reference/ipn>`_ calls can be made (default is 20 IPNs within 10 second). If limit is exceded error will be send to WePay, which will cause WePay to retry the call at a later time. The functionality is to protect from malicios attempts to take advantage of `WePay throttling protection <https://www.wepay.com/developer/reference/throttling>`_ to prevent other API calls.
* ``WEPAY_OBJECTS_DEFAULTS`` - default settings for all objects. You can supply only the values for field that are marked in WePay API as optional. Default is empty. Here is an example::

    WEPAY_OBJECTS_DEFAULTS = {
        'theme_object': {
            'name': 'default_theme',
            'primary_color': '3B1060',
            'secondary_color': 'F8F8F8',
            'background_color': 'F8F8F8',
            'button_color': 'F36B22',
        },
        'account': {
            'type': 'nonprofit',
	    'image_uri': "https://www.example.com/static/images/logo.png",
        },
        'checkout': {
            'app_fee': 0,
	    'fee_payer': 'payee',
	    'type': "DONATION",
	    'shipping_fee': 0,
	},
            'preapproval': {
	    'app_fee': 10, # $10.00
	    'fee_payer': 'payer',
	    'require_shipping': True,
	    'shipping_fee': 0,
	    'charge_tax': False,
	    'payer_email_message': "Thank you for your purchase",
	    'payee_email_message': "Thank you for your business",
	    'frequency': 1,
	    'auto_recur': False,
	    'mode': 'iframe',
	   'funding_sources': 'cc',
	},
    }

* ``WEPAY_FULL_MODELS`` - list of the models you want to store all fileds possible for an object. Choices are the name of the models instead of the object names. Possible choices: ['WPUser', 'WPAccount', 'WPCheckout', 'WPPreapproval', 'WPWithdrawal'] Otherwords if you decide to put the name of the model in this list, all of the fields for associated object listed in WePay API will be stored locally in the databse. Default is empty, so only the necessary fields are stored locally. It was my objective decision to choose which are actually necessary, so if you decide differently, please let me know.
* ``WEPAY_EXTRA_MODELS_MODULE`` - the module containing abstract models with extra fields to be added to the models. If you run into circular import issues consider extending the ``DjangoWePay`` class (refer to the doc for that).
* ``WEPAY_EXTRA_MODELS`` - abstract models that contain extra fields you want to attach to an object. It should be in the form of tuple of tuples or list of tuples in form of string representation of an actual model of an object and string name of abstract model with extra fields. All abstract models with extra fields should be in the same module, which is specified using ``WEPAY_EXTRA_MODELS_MODULE``. Example setting is::

    WEPAY_EXTRA_MODELS = (
       ('WPUser', 'WPUserCustom'),
       ('WPAccount', 'WPAccountCustom'),
       ('WPCheckout', 'WPCheckoutCustom'),
       ('WPPreapproval', 'WPPreapprovalCustom'),
       ('WPWithdrawal', 'WPWithdrawalCustom'),
    )

Extra models example if you are using django.contrib.auth and custom ordering by date of creation::

    class WPUserCustom(models.Model):
        owners = models.ManyToManyField(User)
	create_datetime = models.DateTimeField(auto_now_add=True, null=True)

	class Meta:
	    abstract = True
            ordering = ['-create_datetime',]


    class WPAccountCustom(models.Model):
        create_datetime = models.DateTimeField(auto_now_add=True, null=True)

        class Meta:
            abstract = True
	    ordering = ['-create_datetime',]


    class WPCheckoutCustom(models.Model):
        payer = models.ForeignKey(User, null=True)

        class Meta:
            abstract = True
	    ordering = ['-create_time',]


    class WPPreapprovalCustom(models.Model):
        payer = models.ForeignKey(User, null=True)

        class Meta:
            abstract = True
            ordering = ['-create_time',]


    class WPWithdrawalCustom(models.Model):

        class Meta:
            abstract = True
            ordering = ['-create_time',]
